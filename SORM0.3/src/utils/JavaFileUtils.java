package utils;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import bean.ColumnInfo;
import bean.JavaFieldGetSet;
import bean.TableInfo;
import core.DBManager;
import core.PostgresqlTypeConvertor;
import core.TableContext;
import core.TypeConvertor;

/**
 * 封装了生成Java文件（源代码）的常用操作
 */
public class JavaFileUtils {

	/**
	 * 根据字段信息生产java属性信息，如：var username 转为 private String username；以及相应的set和get方法源码
	 * @param column 字段信息
	 * @param convertor 类型转化信息
	 * @return java属性和set/get方法源码
	 */
	public static JavaFieldGetSet createFieldGetSetSRC(ColumnInfo column,TypeConvertor convertor) {

		JavaFieldGetSet jfgs = new JavaFieldGetSet();

		String javaFieldType = convertor.databaseType2JavaType(column.getDataType());

		jfgs.setFieldInfo("\tprivate "+javaFieldType+" "+column.getName()+";\n" );

		//public String getUsername(){return username;}
		StringBuilder getSrc = new StringBuilder();
		getSrc.append("\tpublic "+javaFieldType+" get"+StringUtils.firstChar2UpperCase(column.getName())+"(){\n");
		getSrc.append("\t\treturn "+column.getName()+";\n");
		getSrc.append("\t}\n");

		jfgs.setGetInfo(getSrc.toString());

		//public void setUsername(String username){this.username = username;}
		StringBuilder setSrc = new StringBuilder();
		setSrc.append("\tpublic void set"+StringUtils.firstChar2UpperCase(column.getName())+"(");
		setSrc.append(javaFieldType+" "+column.getName()+"){\n");
		setSrc.append("\t\tthis."+column.getName()+"="+column.getName()+";\n");
		setSrc.append("\t}\n");

		jfgs.setSetInfo(setSrc.toString());
		return jfgs;
	}

	/**
	 * 根据表信息生成java类的源代码
	 * @param tableInfo 表信息
	 * @param convertor 数据类型转化器
	 * @return java类的源代码
	 */
	public static String createJavaSrc(TableInfo tableInfo, TypeConvertor convertor) {

		Map<String,ColumnInfo> columns = tableInfo.getColumns();
		List<JavaFieldGetSet> javaFields = new ArrayList<JavaFieldGetSet>();

		for(ColumnInfo c:columns.values()) {
			javaFields.add(createFieldGetSetSRC(c, convertor));
		}

		StringBuilder src = new StringBuilder();

		//生成package语句
		src.append("package " + DBManager.getConf().getPoPackage()+";\n\n");

		//生成import语句
		src.append("import java.sql.*;\n");
		src.append("import java.util.*;\n\n");

		//生成类声明语句
		src.append("public class "+StringUtils.firstChar2UpperCase(tableInfo.getTname())+" {\n\n");

		//生成属性列表
		for(JavaFieldGetSet f:javaFields) {
			src.append(f.getFieldInfo());
		}
		src.append("\n\n");

		//生成get方法列表
		for(JavaFieldGetSet f:javaFields) {
			src.append(f.getGetInfo());
		}

		//生成set方法列表
		for(JavaFieldGetSet f:javaFields) {
			src.append(f.getSetInfo());
		}

		//生成类结束
		src.append("}\n");

//		System.out.println(src);
		return src.toString();
	}


	public static void createJavaPOFile(TableInfo tableInfo, TypeConvertor convertor) {
		String src = createJavaSrc(tableInfo, convertor);

		String srcPath = DBManager.getConf().getSrcPath()+"\\";
		
		//Java中的正则表达式转义字符都要一杠变俩杠， 另外地址路径的话可以换成"\\\\"或"/"
		String packagePath = DBManager.getConf().getPoPackage().replaceAll("\\.","/");
		
		File f = new File(srcPath+packagePath);
//		System.out.println(f.getAbsolutePath()+"***************");
		
		if(!f.exists()) {
			f.mkdirs();
		}
		
		BufferedWriter bw = null;

		try {
			bw = new BufferedWriter(new FileWriter(f.getAbsolutePath()+"/"+StringUtils.firstChar2UpperCase(tableInfo.getTname()+".java")));
			bw.write(src);
			
			System.out.println("建立表"+tableInfo.getTname()+"对应的java类："+StringUtils.firstChar2UpperCase(tableInfo.getTname())+".java");

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				if(bw!=null) {
					bw.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}

		}

	}


	/*
	//only for tests
	public static void main(String[] args) {
		//		ColumnInfo ci = new ColumnInfo("username","varchar",0);
		//		ColumnInfo ci = new ColumnInfo("id","int4",0);
		//		JavaFieldGetSet f =createFieldGetSetSRC(ci, new SqlTypeConvertor());
		//		System.out.println(f);

		Map<String,TableInfo> map = TableContext.tables;
//		TableInfo t = map.get("emp");
//		createJavaSrc(t, new SqlTypeConvertor());
//		createJavaPOFile(t, new SqlTypeConvertor());
		
		for(TableInfo t:map.values()) {
			createJavaPOFile(t, new SqlTypeConvertor());
		}
	}
	*/
}

